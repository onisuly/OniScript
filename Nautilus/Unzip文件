#!/usr/bin/env python2
# -*- coding: utf-8 -*-

__author__ = 'onisuly'

import pygtk
pygtk.require('2.0')
import gtk
import os
import pipes


def alert(msg):
    dialog = gtk.MessageDialog()
    dialog.set_markup(msg)
    dialog.run()


def response_to_dialog(entry, dialog, response):
    dialog.response(response)


def get_text(message, label, second_message='', message_type=gtk.MESSAGE_QUESTION):
    # base this on a message dialog
    dialog = gtk.MessageDialog(
        None,
        gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
        message_type,
        gtk.BUTTONS_OK,
        None)
    dialog.set_markup(message)
    # create the text input field
    entry = gtk.Entry()
    # allow the user to press enter to do ok
    entry.connect('activate', response_to_dialog, dialog, gtk.RESPONSE_OK)
    # in order to turn this into a password dialog
    entry.set_visibility(False)
    # create a horizontal box to pack the entry and a label
    hbox = gtk.HBox()
    hbox.pack_start(gtk.Label(label), False, 5, 5)
    hbox.pack_end(entry)
    # some secondary text
    dialog.format_secondary_markup(second_message)
    # add it and show it
    dialog.vbox.pack_end(hbox, True, True, 0)
    dialog.show_all()
    # go go go
    run = dialog.run()
    text = entry.get_text()
    dialog.destroy()
    if run == gtk.RESPONSE_OK:
        return text
    else:
        return None


def unzip(file, codepage):
    info = os.popen('unzip -t %s' % file).read()
    if 'unable to get password' in info:
        password = pipes.quote(get_text('Password required for %s' % file, 'Password:'))
        info = os.popen('unzip -P %s -t %s' % (password, file)).read()
        while 'files skipped because of incorrect password.' in info:
            password = pipes.quote(get_text('Password required for %s' % file, 'Password:',
                                            '<span color=\'#d45d48\'>Wrong password.</span>', gtk.MESSAGE_ERROR))
            info = os.popen('unzip -P %s -t %s' % (password, file)).read()
        os.system('unzip -O %s -P %s %s' % (codepage, password, file))
    else:
        os.system('unzip -O %s %s' % (codepage, file))

class CodePageSelect:
    def __init__(self):
        self.codepage = "CP936"
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_title("Select a code page")
        self.window.set_size_request(300, 40)
        self.window.connect('destroy', lambda w: gtk.main_quit())
        combobox = gtk.combo_box_new_text()
        combobox.append_text('Simplified Chinese - CP936')
        combobox.append_text('UTF-8 - CP65001')
        combobox.append_text('Japanese - CP932')
        combobox.append_text('Korean - CP949')
        combobox.append_text('Traditional Chinese - CP950')
        combobox.connect('changed', self.changed_cb)
        combobox.set_active(0)

        label = gtk.Label("OK")
        label.show()
        button = gtk.Button()
        button.add(label)
        button.connect("clicked", self.submit)
        button.show()

        hbox = gtk.HBox()
        hbox.add(combobox)
        hbox.add(button)

        self.window.add(hbox)
        self.window.show_all()
        return

    def changed_cb(self, combobox):
        model = combobox.get_model()
        index = combobox.get_active()
        if index > -1:
            tmpcodepage =  model[index][0]
            self.codepage = tmpcodepage[tmpcodepage.index("CP"):len(tmpcodepage)]
        return

    def submit(self, button):
        selected = os.environ.get('NAUTILUS_SCRIPT_SELECTED_FILE_PATHS')
        files = selected.splitlines()
        for file in files:
            unzip(pipes.quote(file), self.codepage)
        self.window.destroy()
        return


def main():
    bcb = CodePageSelect()
    gtk.main()

if __name__ == '__main__':
    main()
